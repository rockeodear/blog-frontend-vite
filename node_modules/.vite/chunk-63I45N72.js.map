{
  "version": 3,
  "sources": ["../format/format.js", "../fault/index.js"],
  "sourcesContent": ["//\n// format - printf-like string formatting for JavaScript\n// github.com/samsonjs/format\n// @_sjs\n//\n// Copyright 2010 - 2013 Sami Samhuri <sami@samhuri.net>\n//\n// MIT License\n// http://sjs.mit-license.org\n//\n\n;(function() {\n\n  //// Export the API\n  var namespace;\n\n  // CommonJS / Node module\n  if (typeof module !== 'undefined') {\n    namespace = module.exports = format;\n  }\n\n  // Browsers and other environments\n  else {\n    // Get the global object. Works in ES3, ES5, and ES5 strict mode.\n    namespace = (function(){ return this || (1,eval)('this') }());\n  }\n\n  namespace.format = format;\n  namespace.vsprintf = vsprintf;\n\n  if (typeof console !== 'undefined' && typeof console.log === 'function') {\n    namespace.printf = printf;\n  }\n\n  function printf(/* ... */) {\n    console.log(format.apply(null, arguments));\n  }\n\n  function vsprintf(fmt, replacements) {\n    return format.apply(null, [fmt].concat(replacements));\n  }\n\n  function format(fmt) {\n    var argIndex = 1 // skip initial format argument\n      , args = [].slice.call(arguments)\n      , i = 0\n      , n = fmt.length\n      , result = ''\n      , c\n      , escaped = false\n      , arg\n      , tmp\n      , leadingZero = false\n      , precision\n      , nextArg = function() { return args[argIndex++]; }\n      , slurpNumber = function() {\n          var digits = '';\n          while (/\\d/.test(fmt[i])) {\n            digits += fmt[i++];\n            c = fmt[i];\n          }\n          return digits.length > 0 ? parseInt(digits) : null;\n        }\n      ;\n    for (; i < n; ++i) {\n      c = fmt[i];\n      if (escaped) {\n        escaped = false;\n        if (c == '.') {\n          leadingZero = false;\n          c = fmt[++i];\n        }\n        else if (c == '0' && fmt[i + 1] == '.') {\n          leadingZero = true;\n          i += 2;\n          c = fmt[i];\n        }\n        else {\n          leadingZero = true;\n        }\n        precision = slurpNumber();\n        switch (c) {\n        case 'b': // number in binary\n          result += parseInt(nextArg(), 10).toString(2);\n          break;\n        case 'c': // character\n          arg = nextArg();\n          if (typeof arg === 'string' || arg instanceof String)\n            result += arg;\n          else\n            result += String.fromCharCode(parseInt(arg, 10));\n          break;\n        case 'd': // number in decimal\n          result += parseInt(nextArg(), 10);\n          break;\n        case 'f': // floating point number\n          tmp = String(parseFloat(nextArg()).toFixed(precision || 6));\n          result += leadingZero ? tmp : tmp.replace(/^0/, '');\n          break;\n        case 'j': // JSON\n          result += JSON.stringify(nextArg());\n          break;\n        case 'o': // number in octal\n          result += '0' + parseInt(nextArg(), 10).toString(8);\n          break;\n        case 's': // string\n          result += nextArg();\n          break;\n        case 'x': // lowercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16);\n          break;\n        case 'X': // uppercase hexadecimal\n          result += '0x' + parseInt(nextArg(), 10).toString(16).toUpperCase();\n          break;\n        default:\n          result += c;\n          break;\n        }\n      } else if (c === '%') {\n        escaped = true;\n      } else {\n        result += c;\n      }\n    }\n    return result;\n  }\n\n}());\n", "'use strict'\n\nvar formatter = require('format')\n\nvar fault = create(Error)\n\nmodule.exports = fault\n\nfault.eval = create(EvalError)\nfault.range = create(RangeError)\nfault.reference = create(ReferenceError)\nfault.syntax = create(SyntaxError)\nfault.type = create(TypeError)\nfault.uri = create(URIError)\n\nfault.create = create\n\n// Create a new `EConstructor`, with the formatted `format` as a first argument.\nfunction create(EConstructor) {\n  FormattedError.displayName = EConstructor.displayName || EConstructor.name\n\n  return FormattedError\n\n  function FormattedError(format) {\n    if (format) {\n      format = formatter.apply(null, arguments)\n    }\n\n    return new EConstructor(format)\n  }\n}\n"],
  "mappings": ";;;;;AAAA;AAAA;AAWC,IAAC,YAAW;AAGX,UAAI;AAGJ,UAAI,OAAO,WAAW,aAAa;AACjC,oBAAY,OAAO,UAAU;AAAA,aAI1B;AAEH,oBAAa,WAAU;AAAE,iBAAO,QAAS,IAAE,MAAM;AAAA;AAAA;AAGnD,gBAAU,SAAS;AACnB,gBAAU,WAAW;AAErB,UAAI,OAAO,YAAY,eAAe,OAAO,QAAQ,QAAQ,YAAY;AACvE,kBAAU,SAAS;AAAA;AAGrB,wBAA2B;AACzB,gBAAQ,IAAI,OAAO,MAAM,MAAM;AAAA;AAGjC,wBAAkB,KAAK,cAAc;AACnC,eAAO,OAAO,MAAM,MAAM,CAAC,KAAK,OAAO;AAAA;AAGzC,sBAAgB,KAAK;AACnB,YAAI,WAAW,GACX,OAAO,GAAG,MAAM,KAAK,YACrB,IAAI,GACJ,IAAI,IAAI,QACR,SAAS,IACT,GACA,UAAU,OACV,KACA,KACA,cAAc,OACd,WACA,UAAU,WAAW;AAAE,iBAAO,KAAK;AAAA,WACnC,cAAc,WAAW;AACvB,cAAI,SAAS;AACb,iBAAO,KAAK,KAAK,IAAI,KAAK;AACxB,sBAAU,IAAI;AACd,gBAAI,IAAI;AAAA;AAEV,iBAAO,OAAO,SAAS,IAAI,SAAS,UAAU;AAAA;AAGpD,eAAO,IAAI,GAAG,EAAE,GAAG;AACjB,cAAI,IAAI;AACR,cAAI,SAAS;AACX,sBAAU;AACV,gBAAI,KAAK,KAAK;AACZ,4BAAc;AACd,kBAAI,IAAI,EAAE;AAAA,uBAEH,KAAK,OAAO,IAAI,IAAI,MAAM,KAAK;AACtC,4BAAc;AACd,mBAAK;AACL,kBAAI,IAAI;AAAA,mBAEL;AACH,4BAAc;AAAA;AAEhB,wBAAY;AACZ,oBAAQ;AAAA,mBACH;AACH,0BAAU,SAAS,WAAW,IAAI,SAAS;AAC3C;AAAA,mBACG;AACH,sBAAM;AACN,oBAAI,OAAO,QAAQ,YAAY,eAAe;AAC5C,4BAAU;AAAA;AAEV,4BAAU,OAAO,aAAa,SAAS,KAAK;AAC9C;AAAA,mBACG;AACH,0BAAU,SAAS,WAAW;AAC9B;AAAA,mBACG;AACH,sBAAM,OAAO,WAAW,WAAW,QAAQ,aAAa;AACxD,0BAAU,cAAc,MAAM,IAAI,QAAQ,MAAM;AAChD;AAAA,mBACG;AACH,0BAAU,KAAK,UAAU;AACzB;AAAA,mBACG;AACH,0BAAU,MAAM,SAAS,WAAW,IAAI,SAAS;AACjD;AAAA,mBACG;AACH,0BAAU;AACV;AAAA,mBACG;AACH,0BAAU,OAAO,SAAS,WAAW,IAAI,SAAS;AAClD;AAAA,mBACG;AACH,0BAAU,OAAO,SAAS,WAAW,IAAI,SAAS,IAAI;AACtD;AAAA;AAEA,0BAAU;AACV;AAAA;AAAA,qBAEO,MAAM,KAAK;AACpB,sBAAU;AAAA,iBACL;AACL,sBAAU;AAAA;AAAA;AAGd,eAAO;AAAA;AAAA;AAAA;AAAA;;;AC5HX;AAAA;AAAA;AAEA,QAAI,YAAY;AAEhB,QAAI,QAAQ,OAAO;AAEnB,WAAO,UAAU;AAEjB,UAAM,OAAO,OAAO;AACpB,UAAM,QAAQ,OAAO;AACrB,UAAM,YAAY,OAAO;AACzB,UAAM,SAAS,OAAO;AACtB,UAAM,OAAO,OAAO;AACpB,UAAM,MAAM,OAAO;AAEnB,UAAM,SAAS;AAGf,oBAAgB,cAAc;AAC5B,qBAAe,cAAc,aAAa,eAAe,aAAa;AAEtE,aAAO;AAEP,8BAAwB,QAAQ;AAC9B,YAAI,QAAQ;AACV,mBAAS,UAAU,MAAM,MAAM;AAAA;AAGjC,eAAO,IAAI,aAAa;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
