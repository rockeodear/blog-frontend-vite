import {
  require_abnf,
  require_accesslog,
  require_actionscript,
  require_ada,
  require_angelscript,
  require_apache,
  require_applescript,
  require_arcade,
  require_arduino,
  require_armasm,
  require_asciidoc,
  require_aspectj,
  require_autohotkey,
  require_autoit,
  require_avrasm,
  require_awk,
  require_axapta,
  require_bash,
  require_basic,
  require_bnf,
  require_brainfuck,
  require_c,
  require_c2,
  require_c_like,
  require_cal,
  require_capnproto,
  require_ceylon,
  require_clean,
  require_clojure,
  require_clojure_repl,
  require_cmake,
  require_coffeescript,
  require_coq,
  require_core,
  require_cos,
  require_cpp,
  require_crmsh,
  require_crystal,
  require_csharp,
  require_csp,
  require_css,
  require_d,
  require_dart,
  require_delphi,
  require_diff,
  require_django,
  require_dns,
  require_dockerfile,
  require_dos,
  require_dsconfig,
  require_dts,
  require_dust,
  require_ebnf,
  require_elixir,
  require_elm,
  require_erb,
  require_erlang,
  require_erlang_repl,
  require_excel,
  require_fix,
  require_flix,
  require_fortran,
  require_fsharp,
  require_gams,
  require_gauss,
  require_gcode,
  require_gherkin,
  require_glsl,
  require_gml,
  require_go,
  require_golo,
  require_gradle,
  require_groovy,
  require_haml,
  require_handlebars,
  require_haskell,
  require_haxe,
  require_hsp,
  require_htmlbars,
  require_http,
  require_hy,
  require_inform7,
  require_ini,
  require_irpf90,
  require_isbl,
  require_java,
  require_javascript,
  require_jboss_cli,
  require_json,
  require_julia,
  require_julia_repl,
  require_kotlin,
  require_lasso,
  require_latex,
  require_ldif,
  require_leaf,
  require_less,
  require_lisp,
  require_livecodeserver,
  require_livescript,
  require_llvm,
  require_lsl,
  require_lua,
  require_makefile,
  require_markdown,
  require_mathematica,
  require_matlab,
  require_maxima,
  require_mel,
  require_mercury,
  require_mipsasm,
  require_mizar,
  require_mojolicious,
  require_monkey,
  require_moonscript,
  require_n1ql,
  require_nginx,
  require_nim,
  require_nix,
  require_node_repl,
  require_nsis,
  require_objectivec,
  require_ocaml,
  require_openscad,
  require_oxygene,
  require_parser3,
  require_perl,
  require_pf,
  require_pgsql,
  require_php,
  require_php_template,
  require_plaintext,
  require_pony,
  require_powershell,
  require_processing,
  require_profile,
  require_prolog,
  require_properties,
  require_protobuf,
  require_puppet,
  require_purebasic,
  require_python,
  require_python_repl,
  require_q,
  require_qml,
  require_r,
  require_reasonml,
  require_rib,
  require_roboconf,
  require_routeros,
  require_rsl,
  require_ruby,
  require_ruleslanguage,
  require_rust,
  require_sas,
  require_scala,
  require_scheme,
  require_scilab,
  require_scss,
  require_shell,
  require_smali,
  require_smalltalk,
  require_sml,
  require_sqf,
  require_sql,
  require_sql_more,
  require_stan,
  require_stata,
  require_step21,
  require_stylus,
  require_subunit,
  require_swift,
  require_taggerscript,
  require_tap,
  require_tcl,
  require_thrift,
  require_tp,
  require_twig,
  require_typescript,
  require_vala,
  require_vbnet,
  require_vbscript,
  require_vbscript_html,
  require_verilog,
  require_vhdl,
  require_vim,
  require_x86asm,
  require_xl,
  require_xml,
  require_xquery,
  require_yaml,
  require_zephir
} from "./chunk-X5MUKJZU.js";
import {
  require_fault
} from "./chunk-63I45N72.js";
import {
  require_hast_util_to_text
} from "./chunk-FNMQKSLY.js";
import "./chunk-EYMLJTGX.js";
import {
  require_unist_util_visit
} from "./chunk-EQ5MQS3M.js";
import "./chunk-3RIRJ6BY.js";
import "./chunk-AWYOROPT.js";
import {
  __commonJS,
  __objRest,
  __spreadValues,
  __toModule
} from "./chunk-XTN4ZABK.js";

// node_modules/lowlight/lib/core.js
var require_core2 = __commonJS({
  "node_modules/lowlight/lib/core.js"(exports) {
    "use strict";
    var high = require_core();
    var fault = require_fault();
    exports.highlight = highlight;
    exports.highlightAuto = highlightAuto;
    exports.registerLanguage = registerLanguage;
    exports.listLanguages = listLanguages;
    exports.registerAlias = registerAlias;
    Emitter.prototype.addText = text;
    Emitter.prototype.addKeyword = addKeyword;
    Emitter.prototype.addSublanguage = addSublanguage;
    Emitter.prototype.openNode = open;
    Emitter.prototype.closeNode = close;
    Emitter.prototype.closeAllNodes = noop;
    Emitter.prototype.finalize = noop;
    Emitter.prototype.toHTML = toHtmlNoop;
    var defaultPrefix = "hljs-";
    function highlight(name, value, options) {
      var before = high.configure({});
      var settings = options || {};
      var prefix = settings.prefix;
      var result;
      if (typeof name !== "string") {
        throw fault("Expected `string` for name, got `%s`", name);
      }
      if (!high.getLanguage(name)) {
        throw fault("Unknown language: `%s` is not registered", name);
      }
      if (typeof value !== "string") {
        throw fault("Expected `string` for value, got `%s`", value);
      }
      if (prefix === null || prefix === void 0) {
        prefix = defaultPrefix;
      }
      high.configure({ __emitter: Emitter, classPrefix: prefix });
      result = high.highlight(value, { language: name, ignoreIllegals: true });
      high.configure(before || {});
      if (result.errorRaised) {
        throw result.errorRaised;
      }
      return {
        relevance: result.relevance,
        language: result.language,
        value: result.emitter.rootNode.children
      };
    }
    function highlightAuto(value, options) {
      var settings = options || {};
      var subset = settings.subset || high.listLanguages();
      var prefix = settings.prefix;
      var length = subset.length;
      var index = -1;
      var result;
      var secondBest;
      var current;
      var name;
      if (prefix === null || prefix === void 0) {
        prefix = defaultPrefix;
      }
      if (typeof value !== "string") {
        throw fault("Expected `string` for value, got `%s`", value);
      }
      secondBest = { relevance: 0, language: null, value: [] };
      result = { relevance: 0, language: null, value: [] };
      while (++index < length) {
        name = subset[index];
        if (!high.getLanguage(name)) {
          continue;
        }
        current = highlight(name, value, options);
        current.language = name;
        if (current.relevance > secondBest.relevance) {
          secondBest = current;
        }
        if (current.relevance > result.relevance) {
          secondBest = result;
          result = current;
        }
      }
      if (secondBest.language) {
        result.secondBest = secondBest;
      }
      return result;
    }
    function registerLanguage(name, syntax) {
      high.registerLanguage(name, syntax);
    }
    function listLanguages() {
      return high.listLanguages();
    }
    function registerAlias(name, alias) {
      var map = name;
      var key;
      if (alias) {
        map = {};
        map[name] = alias;
      }
      for (key in map) {
        high.registerAliases(map[key], { languageName: key });
      }
    }
    function Emitter(options) {
      this.options = options;
      this.rootNode = { children: [] };
      this.stack = [this.rootNode];
    }
    function addKeyword(value, name) {
      this.openNode(name);
      this.addText(value);
      this.closeNode();
    }
    function addSublanguage(other, name) {
      var stack = this.stack;
      var current = stack[stack.length - 1];
      var results = other.rootNode.children;
      var node = name ? {
        type: "element",
        tagName: "span",
        properties: { className: [name] },
        children: results
      } : results;
      current.children = current.children.concat(node);
    }
    function text(value) {
      var stack = this.stack;
      var current;
      var tail;
      if (value === "")
        return;
      current = stack[stack.length - 1];
      tail = current.children[current.children.length - 1];
      if (tail && tail.type === "text") {
        tail.value += value;
      } else {
        current.children.push({ type: "text", value });
      }
    }
    function open(name) {
      var stack = this.stack;
      var className = this.options.classPrefix + name;
      var current = stack[stack.length - 1];
      var child = {
        type: "element",
        tagName: "span",
        properties: { className: [className] },
        children: []
      };
      current.children.push(child);
      stack.push(child);
    }
    function close() {
      this.stack.pop();
    }
    function toHtmlNoop() {
      return "";
    }
    function noop() {
    }
  }
});

// node_modules/lowlight/index.js
var require_lowlight = __commonJS({
  "node_modules/lowlight/index.js"(exports, module) {
    "use strict";
    var low = require_core2();
    module.exports = low;
    low.registerLanguage("1c", require_c());
    low.registerLanguage("abnf", require_abnf());
    low.registerLanguage("accesslog", require_accesslog());
    low.registerLanguage("actionscript", require_actionscript());
    low.registerLanguage("ada", require_ada());
    low.registerLanguage("angelscript", require_angelscript());
    low.registerLanguage("apache", require_apache());
    low.registerLanguage("applescript", require_applescript());
    low.registerLanguage("arcade", require_arcade());
    low.registerLanguage("arduino", require_arduino());
    low.registerLanguage("armasm", require_armasm());
    low.registerLanguage("xml", require_xml());
    low.registerLanguage("asciidoc", require_asciidoc());
    low.registerLanguage("aspectj", require_aspectj());
    low.registerLanguage("autohotkey", require_autohotkey());
    low.registerLanguage("autoit", require_autoit());
    low.registerLanguage("avrasm", require_avrasm());
    low.registerLanguage("awk", require_awk());
    low.registerLanguage("axapta", require_axapta());
    low.registerLanguage("bash", require_bash());
    low.registerLanguage("basic", require_basic());
    low.registerLanguage("bnf", require_bnf());
    low.registerLanguage("brainfuck", require_brainfuck());
    low.registerLanguage("c-like", require_c_like());
    low.registerLanguage("c", require_c2());
    low.registerLanguage("cal", require_cal());
    low.registerLanguage("capnproto", require_capnproto());
    low.registerLanguage("ceylon", require_ceylon());
    low.registerLanguage("clean", require_clean());
    low.registerLanguage("clojure", require_clojure());
    low.registerLanguage("clojure-repl", require_clojure_repl());
    low.registerLanguage("cmake", require_cmake());
    low.registerLanguage("coffeescript", require_coffeescript());
    low.registerLanguage("coq", require_coq());
    low.registerLanguage("cos", require_cos());
    low.registerLanguage("cpp", require_cpp());
    low.registerLanguage("crmsh", require_crmsh());
    low.registerLanguage("crystal", require_crystal());
    low.registerLanguage("csharp", require_csharp());
    low.registerLanguage("csp", require_csp());
    low.registerLanguage("css", require_css());
    low.registerLanguage("d", require_d());
    low.registerLanguage("markdown", require_markdown());
    low.registerLanguage("dart", require_dart());
    low.registerLanguage("delphi", require_delphi());
    low.registerLanguage("diff", require_diff());
    low.registerLanguage("django", require_django());
    low.registerLanguage("dns", require_dns());
    low.registerLanguage("dockerfile", require_dockerfile());
    low.registerLanguage("dos", require_dos());
    low.registerLanguage("dsconfig", require_dsconfig());
    low.registerLanguage("dts", require_dts());
    low.registerLanguage("dust", require_dust());
    low.registerLanguage("ebnf", require_ebnf());
    low.registerLanguage("elixir", require_elixir());
    low.registerLanguage("elm", require_elm());
    low.registerLanguage("ruby", require_ruby());
    low.registerLanguage("erb", require_erb());
    low.registerLanguage("erlang-repl", require_erlang_repl());
    low.registerLanguage("erlang", require_erlang());
    low.registerLanguage("excel", require_excel());
    low.registerLanguage("fix", require_fix());
    low.registerLanguage("flix", require_flix());
    low.registerLanguage("fortran", require_fortran());
    low.registerLanguage("fsharp", require_fsharp());
    low.registerLanguage("gams", require_gams());
    low.registerLanguage("gauss", require_gauss());
    low.registerLanguage("gcode", require_gcode());
    low.registerLanguage("gherkin", require_gherkin());
    low.registerLanguage("glsl", require_glsl());
    low.registerLanguage("gml", require_gml());
    low.registerLanguage("go", require_go());
    low.registerLanguage("golo", require_golo());
    low.registerLanguage("gradle", require_gradle());
    low.registerLanguage("groovy", require_groovy());
    low.registerLanguage("haml", require_haml());
    low.registerLanguage("handlebars", require_handlebars());
    low.registerLanguage("haskell", require_haskell());
    low.registerLanguage("haxe", require_haxe());
    low.registerLanguage("hsp", require_hsp());
    low.registerLanguage("htmlbars", require_htmlbars());
    low.registerLanguage("http", require_http());
    low.registerLanguage("hy", require_hy());
    low.registerLanguage("inform7", require_inform7());
    low.registerLanguage("ini", require_ini());
    low.registerLanguage("irpf90", require_irpf90());
    low.registerLanguage("isbl", require_isbl());
    low.registerLanguage("java", require_java());
    low.registerLanguage("javascript", require_javascript());
    low.registerLanguage("jboss-cli", require_jboss_cli());
    low.registerLanguage("json", require_json());
    low.registerLanguage("julia", require_julia());
    low.registerLanguage("julia-repl", require_julia_repl());
    low.registerLanguage("kotlin", require_kotlin());
    low.registerLanguage("lasso", require_lasso());
    low.registerLanguage("latex", require_latex());
    low.registerLanguage("ldif", require_ldif());
    low.registerLanguage("leaf", require_leaf());
    low.registerLanguage("less", require_less());
    low.registerLanguage("lisp", require_lisp());
    low.registerLanguage("livecodeserver", require_livecodeserver());
    low.registerLanguage("livescript", require_livescript());
    low.registerLanguage("llvm", require_llvm());
    low.registerLanguage("lsl", require_lsl());
    low.registerLanguage("lua", require_lua());
    low.registerLanguage("makefile", require_makefile());
    low.registerLanguage("mathematica", require_mathematica());
    low.registerLanguage("matlab", require_matlab());
    low.registerLanguage("maxima", require_maxima());
    low.registerLanguage("mel", require_mel());
    low.registerLanguage("mercury", require_mercury());
    low.registerLanguage("mipsasm", require_mipsasm());
    low.registerLanguage("mizar", require_mizar());
    low.registerLanguage("perl", require_perl());
    low.registerLanguage("mojolicious", require_mojolicious());
    low.registerLanguage("monkey", require_monkey());
    low.registerLanguage("moonscript", require_moonscript());
    low.registerLanguage("n1ql", require_n1ql());
    low.registerLanguage("nginx", require_nginx());
    low.registerLanguage("nim", require_nim());
    low.registerLanguage("nix", require_nix());
    low.registerLanguage("node-repl", require_node_repl());
    low.registerLanguage("nsis", require_nsis());
    low.registerLanguage("objectivec", require_objectivec());
    low.registerLanguage("ocaml", require_ocaml());
    low.registerLanguage("openscad", require_openscad());
    low.registerLanguage("oxygene", require_oxygene());
    low.registerLanguage("parser3", require_parser3());
    low.registerLanguage("pf", require_pf());
    low.registerLanguage("pgsql", require_pgsql());
    low.registerLanguage("php", require_php());
    low.registerLanguage("php-template", require_php_template());
    low.registerLanguage("plaintext", require_plaintext());
    low.registerLanguage("pony", require_pony());
    low.registerLanguage("powershell", require_powershell());
    low.registerLanguage("processing", require_processing());
    low.registerLanguage("profile", require_profile());
    low.registerLanguage("prolog", require_prolog());
    low.registerLanguage("properties", require_properties());
    low.registerLanguage("protobuf", require_protobuf());
    low.registerLanguage("puppet", require_puppet());
    low.registerLanguage("purebasic", require_purebasic());
    low.registerLanguage("python", require_python());
    low.registerLanguage("python-repl", require_python_repl());
    low.registerLanguage("q", require_q());
    low.registerLanguage("qml", require_qml());
    low.registerLanguage("r", require_r());
    low.registerLanguage("reasonml", require_reasonml());
    low.registerLanguage("rib", require_rib());
    low.registerLanguage("roboconf", require_roboconf());
    low.registerLanguage("routeros", require_routeros());
    low.registerLanguage("rsl", require_rsl());
    low.registerLanguage("ruleslanguage", require_ruleslanguage());
    low.registerLanguage("rust", require_rust());
    low.registerLanguage("sas", require_sas());
    low.registerLanguage("scala", require_scala());
    low.registerLanguage("scheme", require_scheme());
    low.registerLanguage("scilab", require_scilab());
    low.registerLanguage("scss", require_scss());
    low.registerLanguage("shell", require_shell());
    low.registerLanguage("smali", require_smali());
    low.registerLanguage("smalltalk", require_smalltalk());
    low.registerLanguage("sml", require_sml());
    low.registerLanguage("sqf", require_sqf());
    low.registerLanguage("sql_more", require_sql_more());
    low.registerLanguage("sql", require_sql());
    low.registerLanguage("stan", require_stan());
    low.registerLanguage("stata", require_stata());
    low.registerLanguage("step21", require_step21());
    low.registerLanguage("stylus", require_stylus());
    low.registerLanguage("subunit", require_subunit());
    low.registerLanguage("swift", require_swift());
    low.registerLanguage("taggerscript", require_taggerscript());
    low.registerLanguage("yaml", require_yaml());
    low.registerLanguage("tap", require_tap());
    low.registerLanguage("tcl", require_tcl());
    low.registerLanguage("thrift", require_thrift());
    low.registerLanguage("tp", require_tp());
    low.registerLanguage("twig", require_twig());
    low.registerLanguage("typescript", require_typescript());
    low.registerLanguage("vala", require_vala());
    low.registerLanguage("vbnet", require_vbnet());
    low.registerLanguage("vbscript", require_vbscript());
    low.registerLanguage("vbscript-html", require_vbscript_html());
    low.registerLanguage("verilog", require_verilog());
    low.registerLanguage("vhdl", require_vhdl());
    low.registerLanguage("vim", require_vim());
    low.registerLanguage("x86asm", require_x86asm());
    low.registerLanguage("xl", require_xl());
    low.registerLanguage("xquery", require_xquery());
    low.registerLanguage("zephir", require_zephir());
  }
});

// node_modules/rehype-highlight/core.js
var require_core3 = __commonJS({
  "node_modules/rehype-highlight/core.js"(exports, module) {
    "use strict";
    var toText = require_hast_util_to_text();
    var visit = require_unist_util_visit();
    module.exports = createPlugin;
    function createPlugin(lowlight) {
      return function(options) {
        var settings = options || {};
        var name = "hljs";
        var pos;
        if (settings.aliases) {
          lowlight.registerAlias(settings.aliases);
        }
        if (settings.languages) {
          for (let name2 in settings.languages) {
            lowlight.registerLanguage(name2, settings.languages[name2]);
          }
        }
        if (settings.prefix) {
          pos = settings.prefix.indexOf("-");
          name = pos > -1 ? settings.prefix.slice(0, pos) : settings.prefix;
        }
        return transformer;
        function transformer(tree) {
          visit(tree, "element", visitor);
        }
        function visitor(node, index, parent) {
          var props;
          var result;
          var lang;
          if (!parent || parent.tagName !== "pre" || node.tagName !== "code") {
            return;
          }
          lang = language(node);
          if (lang === false || !lang && settings.subset === false || settings.plainText && settings.plainText.indexOf(lang) > -1) {
            return;
          }
          props = node.properties;
          if (!props.className) {
            props.className = [];
          }
          if (props.className.indexOf(name) < 0) {
            props.className.unshift(name);
          }
          try {
            result = lang ? lowlight.highlight(lang, toText(parent), options) : lowlight.highlightAuto(toText(parent), options);
          } catch (error) {
            if (!settings.ignoreMissing || !/Unknown language/.test(error.message)) {
              throw error;
            }
            result = {};
          }
          if (!lang && result.language) {
            props.className.push("language-" + result.language);
          }
          if (result.value) {
            node.children = result.value;
          }
        }
      };
    }
    function language(node) {
      var className = node.properties.className || [];
      var index = -1;
      var value;
      while (++index < className.length) {
        value = className[index];
        if (value === "no-highlight" || value === "nohighlight") {
          return false;
        }
        if (value.slice(0, 5) === "lang-") {
          return value.slice(5);
        }
        if (value.slice(0, 9) === "language-") {
          return value.slice(9);
        }
      }
    }
  }
});

// node_modules/rehype-highlight/index.js
var require_rehype_highlight = __commonJS({
  "node_modules/rehype-highlight/index.js"(exports, module) {
    "use strict";
    var lowlight = require_lowlight();
    var createPlugin = require_core3();
    module.exports = createPlugin(lowlight);
  }
});

// node_modules/@bytemd/plugin-highlight-ssr/dist/index.esm.js
var import_rehype_highlight = __toModule(require_rehype_highlight());
function highlightSsr(_a = {}) {
  var _b = _a, { subset = false, ignoreMissing = true } = _b, rest = __objRest(_b, ["subset", "ignoreMissing"]);
  return {
    rehype: (u) => u.use(import_rehype_highlight.default, __spreadValues({ subset, ignoreMissing }, rest))
  };
}

// dep:@bytemd_plugin-highlight-ssr
var bytemd_plugin_highlight_ssr_default = highlightSsr;
export {
  bytemd_plugin_highlight_ssr_default as default
};
//# sourceMappingURL=@bytemd_plugin-highlight-ssr.js.map
