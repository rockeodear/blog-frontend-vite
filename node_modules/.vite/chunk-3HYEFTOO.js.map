{
  "version": 3,
  "sources": ["../micromark/dist/constant/splice.js", "../micromark/dist/util/chunked-splice.js", "../micromark/dist/constant/assign.js", "../micromark/dist/util/shallow.js", "../micromark/dist/util/resolve-all.js", "../micromark/dist/character/markdown-line-ending.js"],
  "sourcesContent": ["'use strict'\n\nvar splice = [].splice\n\nmodule.exports = splice\n", "'use strict'\n\nvar splice = require('../constant/splice.js')\n\n// causes a stack overflow in V8 when trying to insert 100k items for instance.\n\nfunction chunkedSplice(list, start, remove, items) {\n  var end = list.length\n  var chunkStart = 0\n  var parameters // Make start between zero and `end` (included).\n\n  if (start < 0) {\n    start = -start > end ? 0 : end + start\n  } else {\n    start = start > end ? end : start\n  }\n\n  remove = remove > 0 ? remove : 0 // No need to chunk the items if there\u2019s only a couple (10k) items.\n\n  if (items.length < 10000) {\n    parameters = Array.from(items)\n    parameters.unshift(start, remove)\n    splice.apply(list, parameters)\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) splice.apply(list, [start, remove]) // Insert the items in chunks to not cause stack overflows.\n\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000)\n      parameters.unshift(start, 0)\n      splice.apply(list, parameters)\n      chunkStart += 10000\n      start += 10000\n    }\n  }\n}\n\nmodule.exports = chunkedSplice\n", "'use strict'\n\nvar assign = Object.assign\n\nmodule.exports = assign\n", "'use strict'\n\nvar assign = require('../constant/assign.js')\n\nfunction shallow(object) {\n  return assign({}, object)\n}\n\nmodule.exports = shallow\n", "'use strict'\n\nfunction resolveAll(constructs, events, context) {\n  var called = []\n  var index = -1\n  var resolve\n\n  while (++index < constructs.length) {\n    resolve = constructs[index].resolveAll\n\n    if (resolve && called.indexOf(resolve) < 0) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n\nmodule.exports = resolveAll\n", "'use strict'\n\nfunction markdownLineEnding(code) {\n  return code < -2\n}\n\nmodule.exports = markdownLineEnding\n"],
  "mappings": ";;;;;AAAA;AAAA;AAAA;AAEA,QAAI,SAAS,GAAG;AAEhB,WAAO,UAAU;AAAA;AAAA;;;ACJjB;AAAA;AAAA;AAEA,QAAI,SAAS;AAIb,2BAAuB,MAAM,OAAO,QAAQ,OAAO;AACjD,UAAI,MAAM,KAAK;AACf,UAAI,aAAa;AACjB,UAAI;AAEJ,UAAI,QAAQ,GAAG;AACb,gBAAQ,CAAC,QAAQ,MAAM,IAAI,MAAM;AAAA,aAC5B;AACL,gBAAQ,QAAQ,MAAM,MAAM;AAAA;AAG9B,eAAS,SAAS,IAAI,SAAS;AAE/B,UAAI,MAAM,SAAS,KAAO;AACxB,qBAAa,MAAM,KAAK;AACxB,mBAAW,QAAQ,OAAO;AAC1B,eAAO,MAAM,MAAM;AAAA,aACd;AAEL,YAAI;AAAQ,iBAAO,MAAM,MAAM,CAAC,OAAO;AAEvC,eAAO,aAAa,MAAM,QAAQ;AAChC,uBAAa,MAAM,MAAM,YAAY,aAAa;AAClD,qBAAW,QAAQ,OAAO;AAC1B,iBAAO,MAAM,MAAM;AACnB,wBAAc;AACd,mBAAS;AAAA;AAAA;AAAA;AAKf,WAAO,UAAU;AAAA;AAAA;;;ACrCjB;AAAA;AAAA;AAEA,QAAI,SAAS,OAAO;AAEpB,WAAO,UAAU;AAAA;AAAA;;;ACJjB;AAAA;AAAA;AAEA,QAAI,SAAS;AAEb,qBAAiB,QAAQ;AACvB,aAAO,OAAO,IAAI;AAAA;AAGpB,WAAO,UAAU;AAAA;AAAA;;;ACRjB;AAAA;AAAA;AAEA,wBAAoB,YAAY,QAAQ,SAAS;AAC/C,UAAI,SAAS;AACb,UAAI,QAAQ;AACZ,UAAI;AAEJ,aAAO,EAAE,QAAQ,WAAW,QAAQ;AAClC,kBAAU,WAAW,OAAO;AAE5B,YAAI,WAAW,OAAO,QAAQ,WAAW,GAAG;AAC1C,mBAAS,QAAQ,QAAQ;AACzB,iBAAO,KAAK;AAAA;AAAA;AAIhB,aAAO;AAAA;AAGT,WAAO,UAAU;AAAA;AAAA;;;ACnBjB;AAAA;AAAA;AAEA,gCAA4B,MAAM;AAChC,aAAO,OAAO;AAAA;AAGhB,WAAO,UAAU;AAAA;AAAA;",
  "names": []
}
