{
  "version": 3,
  "sources": ["../micromark-extension-math/lib/tokenize-math-flow.js", "../micromark-extension-math/lib/tokenize-math-text.js", "../micromark-extension-math/lib/syntax.js", "../micromark-extension-math/index.js", "../mdast-util-math/from-markdown.js", "../longest-streak/index.js", "../mdast-util-math/to-markdown.js", "../remark-math/index.js", "../@bytemd/plugin-math/lib/icons.js", "../@bytemd/plugin-math/lib/index.js"],
  "sourcesContent": ["'use strict'\n\nexports.tokenize = tokenizeMathFenced\nexports.concrete = true\n\nvar prefixSize = require('micromark/dist/util/prefix-size')\nvar createSpace = require('micromark/dist/tokenize/factory-space')\n\nfunction tokenizeMathFenced(effects, ok, nok) {\n  var self = this\n  var initialPrefix = prefixSize(this.events, 'linePrefix')\n  var sizeOpen = 0\n\n  return start\n\n  function start(code) {\n    /* istanbul ignore if - handled by mm */\n    if (code !== 36) throw new Error('expected `$`')\n\n    effects.enter('mathFlow')\n    effects.enter('mathFlowFence')\n    effects.enter('mathFlowFenceSequence')\n    return sequenceOpen(code)\n  }\n\n  function sequenceOpen(code) {\n    if (code === 36) {\n      effects.consume(code)\n      sizeOpen++\n      return sequenceOpen\n    }\n\n    effects.exit('mathFlowFenceSequence')\n    return sizeOpen < 2\n      ? nok(code)\n      : createSpace(effects, metaOpen, 'whitespace')(code)\n  }\n\n  function metaOpen(code) {\n    if (code === null || code === -5 || code === -4 || code === -3) {\n      return openAfter(code)\n    }\n\n    effects.enter('mathFlowFenceMeta')\n    effects.enter('chunkString', {contentType: 'string'})\n    return meta(code)\n  }\n\n  function meta(code) {\n    if (code === null || code === -5 || code === -4 || code === -3) {\n      effects.exit('chunkString')\n      effects.exit('mathFlowFenceMeta')\n      return openAfter(code)\n    }\n\n    if (code === 36) return nok(code)\n    effects.consume(code)\n    return meta\n  }\n\n  function openAfter(code) {\n    effects.exit('mathFlowFence')\n    return self.interrupt ? ok(code) : content(code)\n  }\n\n  function content(code) {\n    if (code === null) {\n      return after(code)\n    }\n\n    if (code === -5 || code === -4 || code === -3) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return effects.attempt(\n        {tokenize: tokenizeClosingFence, partial: true},\n        after,\n        initialPrefix\n          ? createSpace(effects, content, 'linePrefix', initialPrefix + 1)\n          : content\n      )\n    }\n\n    effects.enter('mathFlowValue')\n    return contentContinue(code)\n  }\n\n  function contentContinue(code) {\n    if (code === null || code === -5 || code === -4 || code === -3) {\n      effects.exit('mathFlowValue')\n      return content(code)\n    }\n\n    effects.consume(code)\n    return contentContinue\n  }\n\n  function after(code) {\n    effects.exit('mathFlow')\n    return ok(code)\n  }\n\n  function tokenizeClosingFence(effects, ok, nok) {\n    var size = 0\n\n    return createSpace(effects, closingPrefixAfter, 'linePrefix', 4)\n\n    function closingPrefixAfter(code) {\n      effects.enter('mathFlowFence')\n      effects.enter('mathFlowFenceSequence')\n      return closingSequence(code)\n    }\n\n    function closingSequence(code) {\n      if (code === 36) {\n        effects.consume(code)\n        size++\n        return closingSequence\n      }\n\n      if (size < sizeOpen) return nok(code)\n      effects.exit('mathFlowFenceSequence')\n      return createSpace(effects, closingSequenceEnd, 'whitespace')(code)\n    }\n\n    function closingSequenceEnd(code) {\n      if (code === null || code === -5 || code === -4 || code === -3) {\n        effects.exit('mathFlowFence')\n        return ok(code)\n      }\n\n      return nok(code)\n    }\n  }\n}\n", "'use strict'\n\nexports.tokenize = tokenizeMathText\nexports.resolve = resolveMathText\nexports.previous = previous\n\nfunction resolveMathText(events) {\n  var tailExitIndex = events.length - 4\n  var headEnterIndex = 3\n  var index\n  var enter\n\n  // If we start and end with an EOL or a space.\n  if (\n    (events[headEnterIndex][1].type === 'lineEnding' ||\n      events[headEnterIndex][1].type === 'space') &&\n    (events[tailExitIndex][1].type === 'lineEnding' ||\n      events[tailExitIndex][1].type === 'space')\n  ) {\n    index = headEnterIndex\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === 'mathTextData') {\n        // Then we have padding.\n        events[tailExitIndex][1].type = 'mathTextPadding'\n        events[headEnterIndex][1].type = 'mathTextPadding'\n        headEnterIndex += 2\n        tailExitIndex -= 2\n        break\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1\n  tailExitIndex++\n\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== 'lineEnding') {\n        enter = index\n      }\n    } else if (\n      index === tailExitIndex ||\n      events[index][1].type === 'lineEnding'\n    ) {\n      events[enter][1].type = 'mathTextData'\n\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end\n        events.splice(enter + 2, index - enter - 2)\n        tailExitIndex -= index - enter - 2\n        index = enter + 2\n      }\n\n      enter = undefined\n    }\n  }\n\n  return events\n}\n\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return (\n    code !== 36 ||\n    this.events[this.events.length - 1][1].type === 'characterEscape'\n  )\n}\n\nfunction tokenizeMathText(effects, ok, nok) {\n  var self = this\n  var sizeOpen = 0\n  var size\n  var token\n\n  return start\n\n  function start(code) {\n    /* istanbul ignore if - handled by mm */\n    if (code !== 36) throw new Error('expected `$`')\n\n    /* istanbul ignore if - handled by mm */\n    if (!previous.call(self, self.previous)) {\n      throw new Error('expected correct previous')\n    }\n\n    effects.enter('mathText')\n    effects.enter('mathTextSequence')\n    return openingSequence(code)\n  }\n\n  function openingSequence(code) {\n    if (code === 36) {\n      effects.consume(code)\n      sizeOpen++\n      return openingSequence\n    }\n\n    effects.exit('mathTextSequence')\n    return gap(code)\n  }\n\n  function gap(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code)\n    }\n\n    // Closing fence?\n    // Could also be data.\n    if (code === 36) {\n      token = effects.enter('mathTextSequence')\n      size = 0\n      return closingSequence(code)\n    }\n\n    // Tabs don\u2019t work, and virtual spaces don\u2019t make sense.\n    if (code === 32) {\n      effects.enter('space')\n      effects.consume(code)\n      effects.exit('space')\n      return gap\n    }\n\n    if (code === -5 || code === -4 || code === -3) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      return gap\n    }\n\n    // Data.\n    effects.enter('mathTextData')\n    return data(code)\n  }\n\n  // In code.\n  function data(code) {\n    if (\n      code === null ||\n      code === 32 ||\n      code === 36 ||\n      code === -5 ||\n      code === -4 ||\n      code === -3\n    ) {\n      effects.exit('mathTextData')\n      return gap(code)\n    }\n\n    effects.consume(code)\n    return data\n  }\n\n  // Closing fence.\n  function closingSequence(code) {\n    // More.\n    if (code === 36) {\n      effects.consume(code)\n      size++\n      return closingSequence\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit('mathTextSequence')\n      effects.exit('mathText')\n      return ok(code)\n    }\n\n    // More or less accents: mark as data.\n    token.type = 'mathTextData'\n    return data(code)\n  }\n}\n", "'use strict'\n\nexports.flow = {36: require('./tokenize-math-flow')}\nexports.text = {36: require('./tokenize-math-text')}\n", "module.exports = require('./lib/syntax')\n", "'use strict'\n\nexports.enter = {\n  mathFlow: enterMathFlow,\n  mathFlowFenceMeta: enterMathFlowMeta,\n  mathText: enterMathText\n}\nexports.exit = {\n  mathFlow: exitMathFlow,\n  mathFlowFence: exitMathFlowFence,\n  mathFlowFenceMeta: exitMathFlowMeta,\n  mathFlowValue: exitMathData,\n  mathText: exitMathText,\n  mathTextData: exitMathData\n}\n\nfunction enterMathFlow(token) {\n  this.enter(\n    {\n      type: 'math',\n      meta: null,\n      value: '',\n      data: {\n        hName: 'div',\n        hProperties: {className: ['math', 'math-display']},\n        hChildren: [{type: 'text', value: ''}]\n      }\n    },\n    token\n  )\n}\n\nfunction enterMathFlowMeta() {\n  this.buffer()\n}\n\nfunction exitMathFlowMeta() {\n  var data = this.resume()\n  this.stack[this.stack.length - 1].meta = data\n}\n\nfunction exitMathFlowFence() {\n  // Exit if this is the closing fence.\n  if (this.getData('mathFlowInside')) return\n  this.buffer()\n  this.setData('mathFlowInside', true)\n}\n\nfunction exitMathFlow(token) {\n  var data = this.resume().replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '')\n  var node = this.exit(token)\n  node.value = data\n  node.data.hChildren[0].value = data\n  this.setData('mathFlowInside')\n}\n\nfunction enterMathText(token) {\n  this.enter(\n    {\n      type: 'inlineMath',\n      value: '',\n      data: {\n        hName: 'span',\n        hProperties: {className: ['math', 'math-inline']},\n        hChildren: [{type: 'text', value: ''}]\n      }\n    },\n    token\n  )\n  this.buffer()\n}\n\nfunction exitMathText(token) {\n  var data = this.resume()\n  var node = this.exit(token)\n  node.value = data\n  node.data.hChildren[0].value = data\n}\n\nfunction exitMathData(token) {\n  this.config.enter.data.call(this, token)\n  this.config.exit.data.call(this, token)\n}\n", "'use strict'\n\nmodule.exports = longestStreak\n\n// Get the count of the longest repeating streak of `character` in `value`.\nfunction longestStreak(value, character) {\n  var count = 0\n  var maximum = 0\n  var expected\n  var index\n\n  if (typeof character !== 'string' || character.length !== 1) {\n    throw new Error('Expected character')\n  }\n\n  value = String(value)\n  index = value.indexOf(character)\n  expected = index\n\n  while (index !== -1) {\n    count++\n\n    if (index === expected) {\n      if (count > maximum) {\n        maximum = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + 1\n    index = value.indexOf(character, expected)\n  }\n\n  return maximum\n}\n", "'use strict'\n\nexports.unsafe = [\n  {character: '\\r', inConstruct: ['mathFlowMeta']},\n  {character: '\\r', inConstruct: ['mathFlowMeta']},\n  {character: '$', inConstruct: ['mathFlowMeta', 'phrasing']},\n  {atBreak: true, character: '$', after: '\\\\$'}\n]\n\nexports.handlers = {math: math, inlineMath: inlineMath}\n\ninlineMath.peek = inlineMathPeek\n\nvar repeat = require('repeat-string')\nvar streak = require('longest-streak')\nvar safe = require('mdast-util-to-markdown/lib/util/safe')\n\nfunction math(node, _, context) {\n  var raw = node.value || ''\n  var fence = repeat('$', Math.max(streak(raw, '$') + 1, 2))\n  var exit = context.enter('mathFlow')\n  var value = fence\n  var subexit\n\n  if (node.meta) {\n    subexit = context.enter('mathFlowMeta')\n    value += safe(context, node.meta, {before: '$', after: ' ', encode: ['$']})\n    subexit()\n  }\n\n  value += '\\n'\n\n  if (raw) {\n    value += raw + '\\n'\n  }\n\n  value += fence\n  exit()\n  return value\n}\n\nfunction inlineMath(node) {\n  var value = node.value || ''\n  var size = 1\n  var pad = ''\n  var sequence\n\n  // If there is a single dollar sign on its own in the math, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (\n    new RegExp('(^|[^$])' + repeat('\\\\$', size) + '([^$]|$)').test(value)\n  ) {\n    size++\n  }\n\n  // If this is not just spaces or eols (tabs don\u2019t count), and either the first\n  // or last character are a space, eol, or dollar sign, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    (/[ \\r\\n$]/.test(value.charAt(0)) ||\n      /[ \\r\\n$]/.test(value.charAt(value.length - 1)))\n  ) {\n    pad = ' '\n  }\n\n  sequence = repeat('$', size)\n  return sequence + pad + value + pad + sequence\n}\n\nfunction inlineMathPeek() {\n  return '$'\n}\n", "'use strict'\n\nvar syntax = require('micromark-extension-math')\nvar fromMarkdown = require('mdast-util-math/from-markdown')\nvar toMarkdown = require('mdast-util-math/to-markdown')\nvar warningIssued\n\nmodule.exports = math\n\nfunction math() {\n  var data = this.data()\n\n  /* istanbul ignore next - old remark. */\n  if (\n    !warningIssued &&\n    ((this.Parser &&\n      this.Parser.prototype &&\n      this.Parser.prototype.blockTokenizers) ||\n      (this.Compiler &&\n        this.Compiler.prototype &&\n        this.Compiler.prototype.visitors))\n  ) {\n    warningIssued = true\n    console.warn(\n      '[remark-math] Warning: please upgrade to remark 13 to use this plugin'\n    )\n  }\n\n  add('micromarkExtensions', syntax)\n  add('fromMarkdownExtensions', fromMarkdown)\n  add('toMarkdownExtensions', toMarkdown)\n\n  function add(field, value) {\n    /* istanbul ignore if - other extensions. */\n    if (data[field]) data[field].push(value)\n    else data[field] = [value]\n  }\n}\n", "// DO NOT EDIT, generated by scripts/icon.js\nexport const icons = {\n    math: '<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m40 9-3-3H8l18 18L8 42h29l3-3\" stroke=\"currentColor\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>',\n    inline: '<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m37 9-3-3H8l17 18L8 42h26l3-3M5 24h10M33 24h10\" stroke=\"currentColor\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>',\n    block: '<svg width=\"1em\" height=\"1em\" viewBox=\"0 0 48 48\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m36 11-3-3H12l16 16-16 16h21l3-3M6 5v38M42 5v38\" stroke=\"currentColor\" stroke-width=\"4\" stroke-linecap=\"round\" stroke-linejoin=\"round\"/></svg>',\n};\n", "import remarkMath from 'remark-math';\nimport { icons } from './icons';\nimport en from './locales/en.json';\nexport default function math({ locale: _locale, katexOptions, } = {}) {\n    const locale = { ...en, ..._locale };\n    let katex;\n    return {\n        remark: (p) => p.use(remarkMath),\n        viewerEffect({ markdownBody }) {\n            const renderMath = async (selector, displayMode) => {\n                const els = markdownBody.querySelectorAll(selector);\n                if (els.length === 0)\n                    return;\n                if (!katex) {\n                    katex = await import('katex');\n                }\n                els.forEach((el) => {\n                    katex.render(el.innerText, el, {\n                        ...katexOptions,\n                        throwOnError: false,\n                        displayMode,\n                    });\n                });\n            };\n            renderMath('.math.math-inline', false);\n            renderMath('.math.math-display', true);\n        },\n        actions: [\n            {\n                icon: icons.math,\n                handler: {\n                    type: 'dropdown',\n                    actions: [\n                        {\n                            title: locale.inline,\n                            icon: icons.inline,\n                            cheatsheet: `$${locale.inlineText}$`,\n                            handler: {\n                                type: 'action',\n                                click({ wrapText, editor }) {\n                                    wrapText('$');\n                                    editor.focus();\n                                },\n                            },\n                        },\n                        {\n                            title: locale.block,\n                            icon: icons.block,\n                            cheatsheet: `$$\u21B5${locale.blockText}\u21B5$$`,\n                            handler: {\n                                type: 'action',\n                                click({ appendBlock, editor, codemirror }) {\n                                    const { line } = appendBlock('$$\\n\\\\TeX\\n$$');\n                                    editor.setSelection(codemirror.Pos(line + 1, 0), codemirror.Pos(line + 1, 4));\n                                    editor.focus();\n                                },\n                            },\n                        },\n                    ],\n                },\n            },\n        ],\n    };\n}\n"],
  "mappings": "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",
  "names": []
}
