{
  "version": 3,
  "sources": ["../micromark-extension-footnote/index.js", "../mdast-util-footnote/from-markdown.js", "../mdast-util-to-markdown/lib/util/association.js", "../mdast-util-footnote/to-markdown.js", "../remark-footnotes/index.js", "../@bytemd/plugin-footnotes/lib/index.js", "dep:@bytemd_plugin-footnotes"],
  "sourcesContent": ["module.exports = footnote\n\nvar normalizeIdentifier = require('micromark/dist/util/normalize-identifier')\nvar blank = require('micromark/dist/tokenize/partial-blank-line')\nvar createSpace = require('micromark/dist/tokenize/factory-space')\nvar chunkedSplice = require('micromark/dist/util/chunked-splice')\nvar prefixSize = require('micromark/dist/util/prefix-size')\nvar shallow = require('micromark/dist/util/shallow')\nvar resolveAll = require('micromark/dist/util/resolve-all')\n\nvar indent = {tokenize: tokenizeIndent, partial: true}\n\nfunction footnote(options) {\n  var settings = options || {}\n  var call = {tokenize: tokenizeFootnoteCall}\n  var noteStart = {tokenize: tokenizeNoteStart, resolveAll: resolveAllNote}\n  var noteEnd = {\n    add: 'after',\n    tokenize: tokenizeNoteEnd,\n    resolveAll: resolveAllNote,\n    resolveTo: resolveToNoteEnd\n  }\n  var definition = {\n    tokenize: tokenizeDefinitionStart,\n    continuation: {tokenize: tokenizeDefinitionContinuation},\n    exit: footnoteDefinitionEnd\n  }\n  var text = {91: call}\n\n  if (settings.inlineNotes) {\n    text[93] = noteEnd\n    text[94] = noteStart\n  }\n\n  return {\n    _hiddenFootnoteSupport: {},\n    document: {91: definition},\n    text: text\n  }\n}\n\n// Remove remaining note starts.\nfunction resolveAllNote(events) {\n  var length = events.length\n  var index = -1\n  var token\n\n  while (++index < length) {\n    token = events[index][1]\n\n    if (events[index][0] === 'enter' && token.type === 'inlineNoteStart') {\n      token.type = 'data'\n      // Remove the two marker (`^[`).\n      events.splice(index + 1, 4)\n      length -= 4\n    }\n  }\n\n  return events\n}\n\nfunction resolveToNoteEnd(events, context) {\n  var index = events.length - 4\n  var group\n  var text\n  var token\n  var type\n  var openIndex\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1]\n\n    // Find where the note starts.\n    if (events[index][0] === 'enter' && token.type === 'inlineNoteStart') {\n      openIndex = index\n      type = 'inlineNote'\n      break\n    }\n  }\n\n  group = {\n    type: type,\n    start: shallow(events[openIndex][1].start),\n    end: shallow(events[events.length - 1][1].end)\n  }\n\n  text = {\n    type: 'inlineNoteText',\n    start: shallow(events[openIndex + 4][1].end),\n    end: shallow(events[events.length - 3][1].start)\n  }\n\n  var note = [\n    ['enter', group, context],\n    events[openIndex + 1],\n    events[openIndex + 2],\n    events[openIndex + 3],\n    events[openIndex + 4],\n    ['enter', text, context]\n  ]\n\n  chunkedSplice(\n    note,\n    note.length,\n    0,\n    resolveAll(\n      context.parser.constructs.insideSpan.null,\n      events.slice(openIndex + 6, -4),\n      context\n    )\n  )\n\n  note.push(\n    ['exit', text, context],\n    events[events.length - 2],\n    events[events.length - 3],\n    ['exit', group, context]\n  )\n\n  chunkedSplice(events, index, events.length - index, note)\n\n  return events\n}\n\nfunction tokenizeFootnoteCall(effects, ok, nok) {\n  var self = this\n  var defined = self.parser.footnotes || (self.parser.footnotes = [])\n  var size = 0\n  var data\n\n  return start\n\n  function start(code) {\n    // istanbul ignore next - Hooks.\n    if (code !== 91) return nok(code)\n\n    effects.enter('footnoteCall')\n    effects.enter('footnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('footnoteCallLabelMarker')\n    return callStart\n  }\n\n  function callStart(code) {\n    if (code !== 94) return nok(code)\n\n    effects.enter('footnoteCallMarker')\n    effects.consume(code)\n    effects.exit('footnoteCallMarker')\n    effects.enter('footnoteCallString')\n    effects.enter('chunkString').contentType = 'string'\n    return callData\n  }\n\n  function callData(code) {\n    var token\n\n    if (code === null || code === 91 || size++ > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      effects.exit('chunkString')\n      token = effects.exit('footnoteCallString')\n      return defined.indexOf(normalizeIdentifier(self.sliceSerialize(token))) <\n        0\n        ? nok(code)\n        : end(code)\n    }\n\n    effects.consume(code)\n\n    if (!(code < 0 || code === 32)) {\n      data = true\n    }\n\n    return code === 92 ? callEscape : callData\n  }\n\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return callData\n    }\n\n    return callData(code)\n  }\n\n  function end(code) {\n    // Always a `]`.\n    effects.enter('footnoteCallLabelMarker')\n    effects.consume(code)\n    effects.exit('footnoteCallLabelMarker')\n    effects.exit('footnoteCall')\n    return ok\n  }\n}\n\nfunction tokenizeNoteStart(effects, ok, nok) {\n  return start\n\n  function start(code) {\n    // istanbul ignore next - Hooks.\n    if (code !== 94) return nok(code)\n\n    effects.enter('inlineNoteStart')\n    effects.enter('inlineNoteMarker')\n    effects.consume(code)\n    effects.exit('inlineNoteMarker')\n    return noteStart\n  }\n\n  function noteStart(code) {\n    if (code !== 91) return nok(code)\n\n    effects.enter('inlineNoteStartMarker')\n    effects.consume(code)\n    effects.exit('inlineNoteStartMarker')\n    effects.exit('inlineNoteStart')\n    return ok\n  }\n}\n\nfunction tokenizeNoteEnd(effects, ok, nok) {\n  var self = this\n\n  return start\n\n  function start(code) {\n    var index = self.events.length\n    var hasStart\n\n    // Find an opening.\n    while (index--) {\n      if (self.events[index][1].type === 'inlineNoteStart') {\n        hasStart = true\n        break\n      }\n    }\n\n    // istanbul ignore next - Hooks.\n    if (code !== 93 || !hasStart) {\n      return nok(code)\n    }\n\n    effects.enter('inlineNoteEnd')\n    effects.enter('inlineNoteEndMarker')\n    effects.consume(code)\n    effects.exit('inlineNoteEndMarker')\n    effects.exit('inlineNoteEnd')\n    return ok\n  }\n}\n\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  var self = this\n  var defined = self.parser.footnotes || (self.parser.footnotes = [])\n  var identifier\n  var size = 0\n  var data\n\n  return start\n\n  function start(code) {\n    /* istanbul ignore if - hooks. */\n    if (code !== 91) {\n      return nok(code)\n    }\n\n    effects.enter('footnoteDefinition')._container = true\n    effects.enter('footnoteDefinitionLabel')\n    effects.enter('footnoteDefinitionLabelMarker')\n    effects.consume(code)\n    effects.exit('footnoteDefinitionLabelMarker')\n    return labelStart\n  }\n\n  function labelStart(code) {\n    // `^`\n    if (code !== 94) return nok(code)\n\n    effects.enter('footnoteDefinitionMarker')\n    effects.consume(code)\n    effects.exit('footnoteDefinitionMarker')\n    effects.enter('footnoteDefinitionLabelString')\n    return atBreak\n  }\n\n  function atBreak(code) {\n    var token\n\n    if (code === null || code === 91 || size > 999) {\n      return nok(code)\n    }\n\n    if (code === 93) {\n      if (!data) {\n        return nok(code)\n      }\n\n      token = effects.exit('footnoteDefinitionLabelString')\n      identifier = normalizeIdentifier(self.sliceSerialize(token))\n      effects.enter('footnoteDefinitionLabelMarker')\n      effects.consume(code)\n      effects.exit('footnoteDefinitionLabelMarker')\n      effects.exit('footnoteDefinitionLabel')\n      return labelAfter\n    }\n\n    if (code === -5 || code === -4 || code === -3) {\n      effects.enter('lineEnding')\n      effects.consume(code)\n      effects.exit('lineEnding')\n      size++\n      return atBreak\n    }\n\n    effects.enter('chunkString').contentType = 'string'\n    return label(code)\n  }\n\n  function label(code) {\n    if (\n      code === null ||\n      code === -5 ||\n      code === -4 ||\n      code === -3 ||\n      code === 91 ||\n      code === 93 ||\n      size > 999\n    ) {\n      effects.exit('chunkString')\n      return atBreak(code)\n    }\n\n    if (!(code < 0 || code === 32)) {\n      data = true\n    }\n\n    size++\n    effects.consume(code)\n    return code === 92 ? labelEscape : label\n  }\n\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code)\n      size++\n      return label\n    }\n\n    return label(code)\n  }\n\n  function labelAfter(code) {\n    if (code !== 58) {\n      return nok(code)\n    }\n\n    effects.enter('definitionMarker')\n    effects.consume(code)\n    effects.exit('definitionMarker')\n    return effects.check(blank, onBlank, nonBlank)\n  }\n\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true\n    return done(code)\n  }\n\n  function nonBlank(code) {\n    // A space or tab.\n    if (code === -2 || code === -1 || code === 32) {\n      effects.enter('footnoteDefinitionWhitespace')\n      effects.consume(code)\n      effects.exit('footnoteDefinitionWhitespace')\n      return done(code)\n    }\n\n    // No space is also fine, just like a block quote marker.\n    return done(code)\n  }\n\n  function done(code) {\n    if (defined.indexOf(identifier) < 0) {\n      defined.push(identifier)\n    }\n\n    return ok(code)\n  }\n}\n\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  var self = this\n\n  return effects.check(blank, onBlank, notBlank)\n\n  // Continued blank lines are fine.\n  function onBlank(code) {\n    if (self.containerState.initialBlankLine) {\n      self.containerState.furtherBlankLines = true\n    }\n\n    return ok(code)\n  }\n\n  // If there were continued blank lines, or this isn\u2019t indented at all.\n  function notBlank(code) {\n    if (\n      self.containerState.furtherBlankLines ||\n      !(code === -2 || code === -1 || code === 32)\n    ) {\n      return nok(code)\n    }\n\n    self.containerState.initialBlankLine = undefined\n    self.containerState.furtherBlankLines = undefined\n    return effects.attempt(indent, ok, nok)(code)\n  }\n}\n\nfunction footnoteDefinitionEnd(effects) {\n  effects.exit('footnoteDefinition')\n}\n\nfunction tokenizeIndent(effects, ok, nok) {\n  var self = this\n\n  return createSpace(effects, afterPrefix, 'footnoteDefinitionIndent', 5)\n\n  function afterPrefix(code) {\n    return prefixSize(self.events, 'footnoteDefinitionIndent') === 4\n      ? ok(code)\n      : nok(code)\n  }\n}\n", "var normalizeIdentifier = require('micromark/dist/util/normalize-identifier')\n\nexports.canContainEols = ['footnote']\n\nexports.enter = {\n  footnoteDefinition: enterFootnoteDefinition,\n  footnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n  footnoteCall: enterFootnoteCall,\n  footnoteCallString: enterFootnoteCallString,\n  inlineNote: enterNote\n}\nexports.exit = {\n  footnoteDefinition: exitFootnoteDefinition,\n  footnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n  footnoteCall: exitFootnoteCall,\n  footnoteCallString: exitFootnoteCallString,\n  inlineNote: exitNote\n}\n\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\nfunction exitFootnoteDefinitionLabelString(token) {\n  var label = this.resume()\n  this.stack[this.stack.length - 1].label = label\n  this.stack[this.stack.length - 1].identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\nfunction exitFootnoteCallString(token) {\n  var label = this.resume()\n  this.stack[this.stack.length - 1].label = label\n  this.stack[this.stack.length - 1].identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n}\n\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\nfunction enterNote(token) {\n  this.enter({type: 'footnote', children: []}, token)\n}\n\nfunction exitNote(token) {\n  this.exit(token)\n}\n", "module.exports = association\n\nvar decode = require('parse-entities/decode-entity')\n\nvar characterEscape = /\\\\([!-/:-@[-`{-~])/g\nvar characterReference = /&(#(\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi\n\n// The `label` of an association is the string value: character escapes and\n// references work, and casing is intact.\n// The `identifier` is used to match one association to another: controversially,\n// character escapes and references don\u2019t work in this matching: `&copy;` does\n// not match `\u00A9`, and `\\+` does not match `+`.\n// But casing is ignored (and whitespace) is trimmed and collapsed: ` A\\nb`\n// matches `a b`.\n// So, we do prefer the label when figuring out how we\u2019re going to serialize:\n// it has whitespace, casing, and we can ignore most useless character escapes\n// and all character references.\nfunction association(node) {\n  if (node.label || !node.identifier) {\n    return node.label || ''\n  }\n\n  return node.identifier\n    .replace(characterEscape, '$1')\n    .replace(characterReference, decodeIfPossible)\n}\n\nfunction decodeIfPossible($0, $1) {\n  return decode($1) || $0\n}\n", "exports.unsafe = [\n  // This is on by default already.\n  {character: '[', inConstruct: ['phrasing', 'label', 'reference']}\n]\nexports.handlers = {\n  footnote: footnote,\n  footnoteDefinition: footnoteDefinition,\n  footnoteReference: footnoteReference\n}\n\nvar association = require('mdast-util-to-markdown/lib/util/association')\nvar phrasing = require('mdast-util-to-markdown/lib/util/container-phrasing')\nvar flow = require('mdast-util-to-markdown/lib/util/container-flow')\nvar indentLines = require('mdast-util-to-markdown/lib/util/indent-lines')\nvar safe = require('mdast-util-to-markdown/lib/util/safe')\n\nfootnoteReference.peek = footnoteReferencePeek\nfootnote.peek = footnotePeek\n\nfunction footnoteReference(node, _, context) {\n  var exit = context.enter('footnoteReference')\n  var subexit = context.enter('reference')\n  var reference = safe(context, association(node), {before: '^', after: ']'})\n  subexit()\n  exit()\n  return '[^' + reference + ']'\n}\n\nfunction footnoteReferencePeek() {\n  return '['\n}\n\nfunction footnote(node, _, context) {\n  var exit = context.enter('footnote')\n  var subexit = context.enter('label')\n  var value = '^[' + phrasing(node, context, {before: '[', after: ']'}) + ']'\n  subexit()\n  exit()\n  return value\n}\n\nfunction footnotePeek() {\n  return '^'\n}\n\nfunction footnoteDefinition(node, _, context) {\n  var exit = context.enter('footnoteDefinition')\n  var subexit = context.enter('label')\n  var label =\n    '[^' + safe(context, association(node), {before: '^', after: ']'}) + ']:'\n  var value\n  subexit()\n\n  value = indentLines(flow(node, context), map)\n  exit()\n\n  return value\n\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : '    ') + line\n    }\n\n    return (blank ? label : label + ' ') + line\n  }\n}\n", "'use strict'\n\nvar syntax = require('micromark-extension-footnote')\nvar fromMarkdown = require('mdast-util-footnote/from-markdown')\nvar toMarkdown = require('mdast-util-footnote/to-markdown')\nvar warningIssued\n\nmodule.exports = footnotes\n\nfunction footnotes(options) {\n  var data = this.data()\n\n  /* istanbul ignore next - old remark. */\n  if (\n    !warningIssued &&\n    ((this.Parser &&\n      this.Parser.prototype &&\n      this.Parser.prototype.blockTokenizers) ||\n      (this.Compiler &&\n        this.Compiler.prototype &&\n        this.Compiler.prototype.visitors))\n  ) {\n    warningIssued = true\n    console.warn(\n      '[remark-footnotes] Warning: please upgrade to remark 13 to use this plugin'\n    )\n  }\n\n  add('micromarkExtensions', syntax(options))\n  add('fromMarkdownExtensions', fromMarkdown)\n  add('toMarkdownExtensions', toMarkdown)\n\n  function add(field, value) {\n    /* istanbul ignore if - other extensions. */\n    if (data[field]) data[field].push(value)\n    else data[field] = [value]\n  }\n}\n", "import remarkFootnotes from 'remark-footnotes';\nexport default function footnotes(options) {\n    return {\n        remark: (u) => u.use(remarkFootnotes, options),\n    };\n}\n", "import d from \"./node_modules/@bytemd/plugin-footnotes/dist/index.esm.js\";export default d;"],
  "mappings": "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",
  "names": []
}
