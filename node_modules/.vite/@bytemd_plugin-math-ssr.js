import {
  math,
  require_remark_math
} from "./chunk-B4ODCUXW.js";
import {
  require_hast_util_from_parse5,
  require_parser,
  require_unified
} from "./chunk-OOASF2QY.js";
import {
  require_katex
} from "./chunk-3GA4OILE.js";
import "./chunk-6EQFNKA7.js";
import "./chunk-SMIMVPOE.js";
import "./chunk-26AS2OEM.js";
import {
  require_hast_util_to_text
} from "./chunk-FNMQKSLY.js";
import "./chunk-EYMLJTGX.js";
import {
  require_unist_util_visit
} from "./chunk-EQ5MQS3M.js";
import "./chunk-3RIRJ6BY.js";
import "./chunk-AWYOROPT.js";
import {
  __commonJS,
  __spreadValues,
  __toModule
} from "./chunk-XTN4ZABK.js";

// node_modules/rehype-parse/errors.json
var require_errors = __commonJS({
  "node_modules/rehype-parse/errors.json"(exports, module) {
    module.exports = {
      abandonedHeadElementChild: {
        reason: "Unexpected metadata element after head",
        description: "Unexpected element after head. Expected the element before `</head>`",
        url: false
      },
      abruptClosingOfEmptyComment: {
        reason: "Unexpected abruptly closed empty comment",
        description: "Unexpected `>` or `->`. Expected `-->` to close comments"
      },
      abruptDoctypePublicIdentifier: {
        reason: "Unexpected abruptly closed public identifier",
        description: "Unexpected `>`. Expected a closing `\"` or `'` after the public identifier"
      },
      abruptDoctypeSystemIdentifier: {
        reason: "Unexpected abruptly closed system identifier",
        description: "Unexpected `>`. Expected a closing `\"` or `'` after the identifier identifier"
      },
      absenceOfDigitsInNumericCharacterReference: {
        reason: "Unexpected non-digit at start of numeric character reference",
        description: "Unexpected `%c`. Expected `[0-9]` for decimal references or `[0-9a-fA-F]` for hexadecimal references"
      },
      cdataInHtmlContent: {
        reason: "Unexpected CDATA section in HTML",
        description: "Unexpected `<![CDATA[` in HTML. Remove it, use a comment, or encode special characters instead"
      },
      characterReferenceOutsideUnicodeRange: {
        reason: "Unexpected too big numeric character reference",
        description: "Unexpectedly high character reference. Expected character references to be at most hexadecimal 10ffff (or decimal 1114111)"
      },
      closingOfElementWithOpenChildElements: {
        reason: "Unexpected closing tag with open child elements",
        description: "Unexpectedly closing tag. Expected other tags to be closed first",
        url: false
      },
      controlCharacterInInputStream: {
        reason: "Unexpected control character",
        description: "Unexpected control character `%x`. Expected a non-control code point, 0x00, or ASCII whitespace"
      },
      controlCharacterReference: {
        reason: "Unexpected control character reference",
        description: "Unexpectedly control character in reference. Expected a non-control code point, 0x00, or ASCII whitespace"
      },
      disallowedContentInNoscriptInHead: {
        reason: "Disallowed content inside `<noscript>` in `<head>`",
        description: "Unexpected text character `%c`. Only use text in `<noscript>`s in `<body>`",
        url: false
      },
      duplicateAttribute: {
        reason: "Unexpected duplicate attribute",
        description: "Unexpectedly double attribute. Expected attributes to occur only once"
      },
      endTagWithAttributes: {
        reason: "Unexpected attribute on closing tag",
        description: "Unexpected attribute. Expected `>` instead"
      },
      endTagWithTrailingSolidus: {
        reason: "Unexpected slash at end of closing tag",
        description: "Unexpected `%c-1`. Expected `>` instead"
      },
      endTagWithoutMatchingOpenElement: {
        reason: "Unexpected unopened end tag",
        description: "Unexpected end tag. Expected no end tag or another end tag",
        url: false
      },
      eofBeforeTagName: {
        reason: "Unexpected end of file",
        description: "Unexpected end of file. Expected tag name instead"
      },
      eofInCdata: {
        reason: "Unexpected end of file in CDATA",
        description: "Unexpected end of file. Expected `]]>` to close the CDATA"
      },
      eofInComment: {
        reason: "Unexpected end of file in comment",
        description: "Unexpected end of file. Expected `-->` to close the comment"
      },
      eofInDoctype: {
        reason: "Unexpected end of file in doctype",
        description: "Unexpected end of file. Expected a valid doctype (such as `<!doctype html>`)"
      },
      eofInElementThatCanContainOnlyText: {
        reason: "Unexpected end of file in element that can only contain text",
        description: "Unexpected end of file. Expected text or a closing tag",
        url: false
      },
      eofInScriptHtmlCommentLikeText: {
        reason: "Unexpected end of file in comment inside script",
        description: "Unexpected end of file. Expected `-->` to close the comment"
      },
      eofInTag: {
        reason: "Unexpected end of file in tag",
        description: "Unexpected end of file. Expected `>` to close the tag"
      },
      incorrectlyClosedComment: {
        reason: "Incorrectly closed comment",
        description: "Unexpected `%c-1`. Expected `-->` to close the comment"
      },
      incorrectlyOpenedComment: {
        reason: "Incorrectly opened comment",
        description: "Unexpected `%c`. Expected `<!--` to open the comment"
      },
      invalidCharacterSequenceAfterDoctypeName: {
        reason: "Invalid sequence after doctype name",
        description: "Unexpected sequence at `%c`. Expected `public` or `system`"
      },
      invalidFirstCharacterOfTagName: {
        reason: "Invalid first character in tag name",
        description: "Unexpected `%c`. Expected an ASCII letter instead"
      },
      misplacedDoctype: {
        reason: "Misplaced doctype",
        description: "Unexpected doctype. Expected doctype before head",
        url: false
      },
      misplacedStartTagForHeadElement: {
        reason: "Misplaced `<head>` start tag",
        description: "Unexpected start tag `<head>`. Expected `<head>` directly after doctype",
        url: false
      },
      missingAttributeValue: {
        reason: "Missing attribute value",
        description: "Unexpected `%c-1`. Expected an attribute value or no `%c-1` instead"
      },
      missingDoctype: {
        reason: "Missing doctype before other content",
        description: "Expected a `<!doctype html>` before anything else",
        url: false
      },
      missingDoctypeName: {
        reason: "Missing doctype name",
        description: "Unexpected doctype end at `%c`. Expected `html` instead"
      },
      missingDoctypePublicIdentifier: {
        reason: "Missing public identifier in doctype",
        description: "Unexpected `%c`. Expected identifier for `public` instead"
      },
      missingDoctypeSystemIdentifier: {
        reason: "Missing system identifier in doctype",
        description: 'Unexpected `%c`. Expected identifier for `system` instead (suggested: `"about:legacy-compat"`)'
      },
      missingEndTagName: {
        reason: "Missing name in end tag",
        description: "Unexpected `%c`. Expected an ASCII letter instead"
      },
      missingQuoteBeforeDoctypePublicIdentifier: {
        reason: "Missing quote before public identifier in doctype",
        description: "Unexpected `%c`. Expected `\"` or `'` instead"
      },
      missingQuoteBeforeDoctypeSystemIdentifier: {
        reason: "Missing quote before system identifier in doctype",
        description: "Unexpected `%c`. Expected `\"` or `'` instead"
      },
      missingSemicolonAfterCharacterReference: {
        reason: "Missing semicolon after character reference",
        description: "Unexpected `%c`. Expected `;` instead"
      },
      missingWhitespaceAfterDoctypePublicKeyword: {
        reason: "Missing whitespace after public identifier in doctype",
        description: "Unexpected `%c`. Expected ASCII whitespace instead"
      },
      missingWhitespaceAfterDoctypeSystemKeyword: {
        reason: "Missing whitespace after system identifier in doctype",
        description: "Unexpected `%c`. Expected ASCII whitespace instead"
      },
      missingWhitespaceBeforeDoctypeName: {
        reason: "Missing whitespace before doctype name",
        description: "Unexpected `%c`. Expected ASCII whitespace instead"
      },
      missingWhitespaceBetweenAttributes: {
        reason: "Missing whitespace between attributes",
        description: "Unexpected `%c`. Expected ASCII whitespace instead"
      },
      missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers: {
        reason: "Missing whitespace between public and system identifiers in doctype",
        description: "Unexpected `%c`. Expected ASCII whitespace instead"
      },
      nestedComment: {
        reason: "Unexpected nested comment",
        description: "Unexpected `<!--`. Expected `-->`"
      },
      nestedNoscriptInHead: {
        reason: "Unexpected nested `<noscript>` in `<head>`",
        description: "Unexpected `<noscript>`. Expected a closing tag or a meta element",
        url: false
      },
      nonConformingDoctype: {
        reason: "Unexpected non-conforming doctype declaration",
        description: 'Expected `<!doctype html>` or `<!doctype html system "about:legacy-compat">`',
        url: false
      },
      nonVoidHtmlElementStartTagWithTrailingSolidus: {
        reason: "Unexpected trailing slash on start tag of non-void element",
        description: "Unexpected `/`. Expected `>` instead"
      },
      noncharacterCharacterReference: {
        reason: "Unexpected noncharacter code point referenced by character reference",
        description: "Unexpected code point. Do not use noncharacters in HTML"
      },
      noncharacterInInputStream: {
        reason: "Unexpected noncharacter character",
        description: "Unexpected code point `%x`. Do not use noncharacters in HTML"
      },
      nullCharacterReference: {
        reason: "Unexpected NULL character referenced by character reference",
        description: "Unexpected code point. Do not use NULL characters in HTML"
      },
      openElementsLeftAfterEof: {
        reason: "Unexpected end of file",
        description: "Unexpected end of file. Expected closing tag instead",
        url: false
      },
      surrogateCharacterReference: {
        reason: "Unexpected surrogate character referenced by character reference",
        description: "Unexpected code point. Do not use lone surrogate characters in HTML"
      },
      surrogateInInputStream: {
        reason: "Unexpected surrogate character",
        description: "Unexpected code point `%x`. Do not use lone surrogate characters in HTML"
      },
      unexpectedCharacterAfterDoctypeSystemIdentifier: {
        reason: "Invalid character after system identifier in doctype",
        description: "Unexpected character at `%c`. Expected `>`"
      },
      unexpectedCharacterInAttributeName: {
        reason: "Unexpected character in attribute name",
        description: "Unexpected `%c`. Expected whitespace, `/`, `>`, `=`, or probably an ASCII letter"
      },
      unexpectedCharacterInUnquotedAttributeValue: {
        reason: "Unexpected character in unquoted attribute value",
        description: "Unexpected `%c`. Quote the attribute value to include it"
      },
      unexpectedEqualsSignBeforeAttributeName: {
        reason: "Unexpected equals sign before attribute name ",
        description: "Unexpected `%c`. Add an attribute name before it"
      },
      unexpectedNullCharacter: {
        reason: "Unexpected NULL character",
        description: "Unexpected code point `%x`. Do not use NULL characters in HTML"
      },
      unexpectedQuestionMarkInsteadOfTagName: {
        reason: "Unexpected question mark instead of tag name",
        description: "Unexpected `%c`. Expected an ASCII letter instead"
      },
      unexpectedSolidusInTag: {
        reason: "Unexpected slash in tag",
        description: "Unexpected `%c-1`. Expected it followed by `>` or in a quoted attribute value"
      },
      unknownNamedCharacterReference: {
        reason: "Unexpected unknown named character reference",
        description: "Unexpected character reference. Expected known named character references"
      }
    };
  }
});

// node_modules/rehype-parse/index.js
var require_rehype_parse = __commonJS({
  "node_modules/rehype-parse/index.js"(exports, module) {
    "use strict";
    var fromParse5 = require_hast_util_from_parse5();
    var Parser5 = require_parser();
    var errors = require_errors();
    var base = "https://html.spec.whatwg.org/multipage/parsing.html#parse-error-";
    var fatalities = { 2: true, 1: false, 0: null };
    module.exports = parse;
    function parse(options) {
      var settings = Object.assign({}, options, this.data("settings"));
      var position = settings.position;
      position = typeof position === "boolean" ? position : true;
      this.Parser = parser;
      function parser(doc, file) {
        var fn = settings.fragment ? "parseFragment" : "parse";
        var onParseError = settings.emitParseErrors ? onerror : null;
        var parse5 = new Parser5({
          sourceCodeLocationInfo: position,
          onParseError,
          scriptingEnabled: false
        });
        return fromParse5(parse5[fn](doc), {
          space: settings.space,
          file,
          verbose: settings.verbose
        });
        function onerror(err) {
          var code = err.code;
          var name = camelcase(code);
          var setting = settings[name];
          var config = setting === void 0 || setting === null ? true : setting;
          var level = typeof config === "number" ? config : config ? 1 : 0;
          var start = {
            line: err.startLine,
            column: err.startCol,
            offset: err.startOffset
          };
          var end = { line: err.endLine, column: err.endCol, offset: err.endOffset };
          var info;
          var message;
          if (level) {
            info = errors[name] || {
              reason: "",
              description: ""
            };
            message = file.message(format(info.reason), { start, end });
            message.source = "parse-error";
            message.ruleId = code;
            message.fatal = fatalities[level];
            message.note = format(info.description);
            message.url = info.url === false ? null : base + code;
          }
          function format(value) {
            return value.replace(/%c(?:-(\d+))?/g, char).replace(/%x/g, encodedChar);
          }
          function char($0, $1) {
            var offset = $1 ? -parseInt($1, 10) : 0;
            var char2 = doc.charAt(err.startOffset + offset);
            return char2 === "`" ? "` ` `" : char2;
          }
          function encodedChar() {
            var char2 = doc.charCodeAt(err.startOffset).toString(16).toUpperCase();
            return "0x" + char2;
          }
        }
      }
    }
    function camelcase(value) {
      return value.replace(/-[a-z]/g, replacer);
    }
    function replacer($0) {
      return $0.charAt(1).toUpperCase();
    }
  }
});

// node_modules/rehype-katex/index.js
var require_rehype_katex = __commonJS({
  "node_modules/rehype-katex/index.js"(exports, module) {
    var visit = require_unist_util_visit();
    var katex = require_katex().renderToString;
    var unified = require_unified();
    var parse = require_rehype_parse();
    var toText = require_hast_util_to_text();
    module.exports = rehypeKatex2;
    var assign = Object.assign;
    var parseHtml = unified().use(parse, { fragment: true, position: false });
    var source = "rehype-katex";
    function rehypeKatex2(options) {
      const settings = options || {};
      const throwOnError = settings.throwOnError || false;
      return transformMath;
      function transformMath(tree, file) {
        visit(tree, "element", onelement);
        function onelement(element) {
          const classes = element.properties.className || [];
          const inline2 = classes.includes("math-inline");
          const displayMode = classes.includes("math-display");
          if (!inline2 && !displayMode) {
            return;
          }
          const value = toText(element);
          let result;
          try {
            result = katex(value, assign({}, settings, { displayMode, throwOnError: true }));
          } catch (error) {
            const fn = throwOnError ? "fail" : "message";
            const origin = [source, error.name.toLowerCase()].join(":");
            file[fn](error.message, element.position, origin);
            result = katex(value, assign({}, settings, {
              displayMode,
              throwOnError: false,
              strict: "ignore"
            }));
          }
          element.children = parseHtml.parse(result).children;
        }
      }
    }
  }
});

// node_modules/@bytemd/plugin-math-ssr/dist/index.esm.js
var import_remark_math = __toModule(require_remark_math());
var import_rehype_katex = __toModule(require_rehype_katex());
var inline = "Inline formula";
var inlineText = "formula";
var block = "Block formula";
var blockText = "formula";
var en = {
  inline,
  inlineText,
  block,
  blockText
};
function mathSsr({ locale: _locale, katexOptions } = {}) {
  const locale = __spreadValues(__spreadValues({}, en), _locale);
  return {
    remark: (u) => u.use(import_remark_math.default),
    rehype: (u) => u.use(import_rehype_katex.default, katexOptions),
    actions: math({ locale }).actions
  };
}

// dep:@bytemd_plugin-math-ssr
var bytemd_plugin_math_ssr_default = mathSsr;
export {
  bytemd_plugin_math_ssr_default as default
};
//# sourceMappingURL=@bytemd_plugin-math-ssr.js.map
