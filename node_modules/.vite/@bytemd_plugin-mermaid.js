import {
  __objRest,
  __spreadValues
} from "./chunk-XTN4ZABK.js";

// node_modules/@bytemd/plugin-mermaid/dist/index.esm.js
var icons = {
  mermaid: '<svg width="1em" height="1em" viewBox="0 0 48 48" fill="none" xmlns="http://www.w3.org/2000/svg"><path fill="#fff" fill-opacity=".01" d="M0 0h48v48H0z"/><path stroke="currentColor" stroke-width="4" stroke-linejoin="round" d="M17 6h14v9H17zM6 33h14v9H6zM28 33h14v9H28z"/><path d="M24 16v8M13 33v-9h22v9" stroke="currentColor" stroke-width="4" stroke-linecap="round" stroke-linejoin="round"/></svg>'
};
var mermaid$1 = "Mermaid diagrams";
var flowchart = "Flow chart";
var sequence = "Sequence diagram";
var state = "State diagram";
var er = "Entity relationship diagram";
var uj = "User journey diagram";
var gantt = "Gantt chart";
var pie = "Pie chart";
var en = {
  mermaid: mermaid$1,
  flowchart,
  sequence,
  "class": "Class diagram",
  state,
  er,
  uj,
  gantt,
  pie
};
function mermaid(_a = {}) {
  var _b = _a, { locale: _locale } = _b, mermaidConfig = __objRest(_b, ["locale"]);
  const locale = __spreadValues(__spreadValues({}, en), _locale);
  let m;
  const actionItems = [
    {
      title: locale.flowchart,
      code: `graph TD
Start --> Stop`
    },
    {
      title: locale.sequence,
      code: `sequenceDiagram
Alice->>John: Hello John, how are you?
John-->>Alice: Great!
Alice-)John: See you later!`
    },
    {
      title: locale.class,
      code: `classDiagram
Animal <|-- Duck
Animal <|-- Fish
Animal <|-- Zebra
Animal : +int age
Animal : +String gender
Animal: +isMammal()
Animal: +mate()
class Duck{
+String beakColor
+swim()
+quack()
}
class Fish{
-int sizeInFeet
-canEat()
}
class Zebra{
+bool is_wild
+run()
}`
    },
    {
      title: locale.state,
      code: `stateDiagram-v2
[*] --> Still
Still --> [*]

Still --> Moving
Moving --> Still
Moving --> Crash
Crash --> [*]`
    },
    {
      title: locale.er,
      code: `erDiagram
CUSTOMER ||--o{ ORDER : places
ORDER ||--|{ LINE-ITEM : contains
CUSTOMER }|..|{ DELIVERY-ADDRESS : uses`
    },
    {
      title: locale.uj,
      code: `journey
title My working day
section Go to work
Make tea: 5: Me
Go upstairs: 3: Me
Do work: 1: Me, Cat
section Go home
Go downstairs: 5: Me
Sit down: 5: Me`
    },
    {
      title: locale.gantt,
      code: `gantt
title A Gantt Diagram
dateFormat  YYYY-MM-DD
section Section
A task           :a1, 2014-01-01, 30d
Another task     :after a1  , 20d
section Another
Task in sec      :2014-01-12  , 12d
another task      : 24d`
    },
    {
      title: locale.pie,
      code: `pie title Pets adopted by volunteers
"Dogs" : 386
"Cats" : 85
"Rats" : 15`
    }
  ];
  return {
    viewerEffect({ markdownBody }) {
      (async () => {
        const els = markdownBody.querySelectorAll("pre>code.language-mermaid");
        if (els.length === 0)
          return;
        if (!m) {
          m = await import("./mermaid.esm.min-D5DHO7AE.js").then((c) => c.default);
          if (mermaidConfig) {
            m.initialize(mermaidConfig);
          }
        }
        els.forEach((el, i) => {
          const pre = el.parentElement;
          const source = el.innerText;
          const container = document.createElement("div");
          container.classList.add("bytemd-mermaid");
          container.style.lineHeight = "initial";
          pre.replaceWith(container);
          try {
            m.render(`bytemd-mermaid-${Date.now()}-${i}`, source, (svgCode) => {
              container.innerHTML = svgCode;
            }, container);
          } catch (err) {
          }
        });
      })();
    },
    actions: [
      {
        title: locale.mermaid,
        icon: icons.mermaid,
        cheatsheet: "```mermaid",
        handler: __spreadValues({
          type: "dropdown",
          actions: actionItems.map(({ title, code }) => ({
            title,
            handler: {
              type: "action",
              click({ editor, appendBlock, codemirror }) {
                const { line } = appendBlock("```mermaid\n" + code + "\n```");
                editor.setSelection(codemirror.Pos(line + 1, 0), codemirror.Pos(line + code.split("\n").length));
                editor.focus();
              }
            }
          }))
        }, locale)
      }
    ]
  };
}

// dep:@bytemd_plugin-mermaid
var bytemd_plugin_mermaid_default = mermaid;
export {
  bytemd_plugin_mermaid_default as default
};
//# sourceMappingURL=@bytemd_plugin-mermaid.js.map
