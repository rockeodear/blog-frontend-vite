{
  "version": 3,
  "sources": ["../unist-util-is/convert.js", "../unist-util-visit-parents/color.browser.js", "../unist-util-visit-parents/index.js"],
  "sourcesContent": ["'use strict'\n\nmodule.exports = convert\n\nfunction convert(test) {\n  if (test == null) {\n    return ok\n  }\n\n  if (typeof test === 'string') {\n    return typeFactory(test)\n  }\n\n  if (typeof test === 'object') {\n    return 'length' in test ? anyFactory(test) : allFactory(test)\n  }\n\n  if (typeof test === 'function') {\n    return test\n  }\n\n  throw new Error('Expected function, string, or object as test')\n}\n\n// Utility assert each property in `test` is represented in `node`, and each\n// values are strictly equal.\nfunction allFactory(test) {\n  return all\n\n  function all(node) {\n    var key\n\n    for (key in test) {\n      if (node[key] !== test[key]) return false\n    }\n\n    return true\n  }\n}\n\nfunction anyFactory(tests) {\n  var checks = []\n  var index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return any\n\n  function any() {\n    var index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, arguments)) {\n        return true\n      }\n    }\n\n    return false\n  }\n}\n\n// Utility to convert a string into a function which checks a given node\u2019s type\n// for said string.\nfunction typeFactory(test) {\n  return type\n\n  function type(node) {\n    return Boolean(node && node.type === test)\n  }\n}\n\n// Utility to return true.\nfunction ok() {\n  return true\n}\n", "module.exports = identity\nfunction identity(d) {\n  return d\n}\n", "'use strict'\n\nmodule.exports = visitParents\n\nvar convert = require('unist-util-is/convert')\nvar color = require('./color')\n\nvar CONTINUE = true\nvar SKIP = 'skip'\nvar EXIT = false\n\nvisitParents.CONTINUE = CONTINUE\nvisitParents.SKIP = SKIP\nvisitParents.EXIT = EXIT\n\nfunction visitParents(tree, test, visitor, reverse) {\n  var step\n  var is\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    visitor = test\n    test = null\n  }\n\n  is = convert(test)\n  step = reverse ? -1 : 1\n\n  factory(tree, null, [])()\n\n  function factory(node, index, parents) {\n    var value = typeof node === 'object' && node !== null ? node : {}\n    var name\n\n    if (typeof value.type === 'string') {\n      name =\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      visit.displayName =\n        'node (' + color(value.type + (name ? '<' + name + '>' : '')) + ')'\n    }\n\n    return visit\n\n    function visit() {\n      var grandparents = parents.concat(node)\n      var result = []\n      var subresult\n      var offset\n\n      if (!test || is(node, index, parents[parents.length - 1] || null)) {\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if (node.children && result[0] !== SKIP) {\n        offset = (reverse ? node.children.length : -1) + step\n\n        while (offset > -1 && offset < node.children.length) {\n          subresult = factory(node.children[offset], offset, grandparents)()\n\n          if (subresult[0] === EXIT) {\n            return subresult\n          }\n\n          offset =\n            typeof subresult[1] === 'number' ? subresult[1] : offset + step\n        }\n      }\n\n      return result\n    }\n  }\n}\n\nfunction toResult(value) {\n  if (value !== null && typeof value === 'object' && 'length' in value) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return [value]\n}\n"],
  "mappings": "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",
  "names": []
}
